package application;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;


public class FirstComeFirstWin extends Application {
	Scene startScene, gameScene, endScene;
    private int playerScore = 0;
    private int computerScore = 0;
    private int roundsToWin = 1; //for testing roundsToWin = 1;


    @Override
    public void start(Stage primaryStage) throws Exception {
    	
    	//gameScene
        Label titleLable = new Label("First Come First Win");
        titleLable.setTextFill(Color.web("#6189D0"));
        titleLable.setFont(Font.font("Comic Sans MS", FontWeight.BOLD,25));
        Label playerScoreLable = new Label("Player Score: 0");
        playerScoreLable.setFont(Font.font("Comic Sans MS", FontWeight.BOLD,18));
        Label computerScoreLable = new Label("Computer Score: 0");
        computerScoreLable.setFont(Font.font("Comic Sans MS", FontWeight.BOLD,18));
        Label Resultlable = new Label("");
        Resultlable.setFont(Font.font("Comic Sans MS", FontWeight.BOLD,14));
        

        
        Button btnRock = new Button("Rock");
        btnRock.setFont(Font.font("Comic Sans MS", FontWeight.BOLD,14));
        Button btnPaper = new Button("Paper");
        btnPaper.setFont(Font.font("Comic Sans MS", FontWeight.BOLD,14));
        Button btnScissors = new Button("Scissors");
        btnScissors.setFont(Font.font("Comic Sans MS", FontWeight.BOLD,14));
        
        //Choices Button
        btnRock.setOnAction(e -> {
            playRound("rock", Resultlable);
            updateScores(playerScoreLable, computerScoreLable);
            checkWinCondition(primaryStage);
        });


        btnPaper.setOnAction(e -> {
            playRound("paper", Resultlable);
            updateScores(playerScoreLable, computerScoreLable);
            checkWinCondition(primaryStage);
        });


        btnScissors.setOnAction(e -> {
            playRound("scissors", Resultlable);
            updateScores(playerScoreLable, computerScoreLable);
            checkWinCondition(primaryStage);
        });
        
      
        // Layout
        GridPane gridPane = new GridPane();
        gridPane.setAlignment(Pos.CENTER);
        gridPane.setHgap(10);
        gridPane.setVgap(10);
        gridPane.add(btnRock, 0, 0);
        gridPane.add(btnPaper, 1, 0);
        gridPane.add(btnScissors, 2, 0);


        VBox vBox = new VBox(20);
        vBox.setAlignment(Pos.CENTER);
        vBox.getChildren().addAll(titleLable, playerScoreLable, computerScoreLable, gridPane, Resultlable);

        //Scene setting (vBox, weight,height)
        
        Scene gameScene = new Scene(vBox, 500, 400); 
        primaryStage.setTitle("First Come First Win");
        primaryStage.setScene(gameScene);
        primaryStage.show();
    }

    //Game logic
	private void playRound(String playerChoice, Label lblResult) {
        String computerChoice = getComputerChoice();
        String result;

        if (playerChoice.equals(computerChoice)) {
            result = "Tie!";
        } else if ((playerChoice.equals("rock") && computerChoice.equals("scissors"))
                || (playerChoice.equals("paper") && computerChoice.equals("rock"))
                || (playerChoice.equals("scissors") && computerChoice.equals("paper"))) {
            result = "You win!";
            playerScore++;
        } else {
            result = "Computer wins!";
            computerScore++;
        }

        lblResult.setText("You chose " + playerChoice + ", computer chose " + computerChoice + ". " + result);
    }


    private String getComputerChoice() {
        int choice = (int) (Math.random() * 3);

        if (choice == 0) {
            return "rock";
        } else if (choice == 1) {
            return "paper";
        } else {
            return "scissors";
        }
    }


    private void updateScores(Label lblPlayerScore, Label lblComputerScore) {
        lblPlayerScore.setText("Player Score: " + playerScore);
        lblComputerScore.setText("Computer Score: " + computerScore);
    }


    private void checkWinCondition(Stage endScene) {
        if (playerScore >= roundsToWin) {
        endGame(endScene, "You win!");
        } else if (computerScore >= roundsToWin) {
        endGame(endScene, "Computer wins!");
        }
        }
    
	private void endGame(Stage primaryStage, String result) {
		Label lblResult = new Label(result);
		lblResult.setFont(Font.font("Comic Sans MS", FontWeight.BOLD,15));
		

		Button btnNewGame = new Button("New Game");
		btnNewGame.setFont(Font.font("Comic Sans MS", FontWeight.BOLD,12));
		btnNewGame.setOnAction(e -> {
			playerScore = 0;
			computerScore = 0;
			lblResult.setText("");
			primaryStage.setScene(gameScene); //not jet fix: to return gameScene
			
	});
		
		Button btnExitGame = new Button("Exit");
		btnExitGame.setFont(Font.font("Comic Sans MS", FontWeight.BOLD,12));
		btnExitGame.setOnAction(e -> {
			primaryStage.close();
		});
	
		
		HBox hBox1 = new HBox(20);
		hBox1.setAlignment(Pos.CENTER);
		hBox1.getChildren().addAll(btnNewGame, btnExitGame);
		
		VBox vBox = new VBox(20);
		vBox.setAlignment(Pos.CENTER);
		vBox.getChildren().addAll(lblResult, hBox1);
       
		Scene endScene = new Scene(vBox, 500, 200);
		primaryStage.setScene(endScene);
	}
       
        public static void main(String[] args) {
            launch(args);
        }
       
    }



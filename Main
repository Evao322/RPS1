package ver2;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.*;
import javafx.scene.layout.*;
import javafx.scene.text.*;
import javafx.stage.Stage;

import java.util.Random;

public class Main extends Application {
    private static final int WINDOW_WIDTH = 800;
    private static final int WINDOW_HEIGHT = 600;
    private static final int GAME_PANE_WIDTH = 400;
    private static final int GAME_PANE_HEIGHT = 300;

    private Stage primaryStage;
    private Scene startScene, gameScene, endScene;
    private int playerScore, computerScore, maxScore;

    private ImageView playerChoiceImageView, computerChoiceImageView;
    private Label playerScoreLabel, computerScoreLabel, messageLabel;

    private final Random random = new Random();
    private final String[] choices = {"Rock", "Paper", "Scissors"};

    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        primaryStage.setTitle("Rock Paper Scissors Game");

       

        // create start scene
        VBox startPane = new VBox(20);
        startPane.setAlignment(Pos.CENTER);
        Label titleLabel = new Label("Rock Paper Scissors Game");
        titleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 36));
        Label maxScoreLabel = new Label("Winning Score (1-10):");
        maxScoreLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        TextField maxScoreTextField = new TextField("5");
        maxScoreTextField.setMaxWidth(50);
        Button startButton = new Button("Start Game");
        startButton.setOnAction(e -> {
            maxScore = Integer.parseInt(maxScoreTextField.getText());
            playerScore = 0;
            computerScore = 0;
            updateGameScene();
            primaryStage.setScene(gameScene);
        });
        startPane.getChildren().addAll(titleLabel, maxScoreLabel, maxScoreTextField, startButton);
        startScene = new Scene(startPane, WINDOW_WIDTH, WINDOW_HEIGHT);
        
        // create game scene
        HBox gamePane = new HBox(20);
        gamePane.setAlignment(Pos.CENTER);
        playerChoiceImageView = new ImageView();
        computerChoiceImageView = new ImageView();
        VBox scorePane = new VBox(20);
        scorePane.setAlignment(Pos.CENTER);
        playerScoreLabel = new Label("Player: 0");
        playerScoreLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        computerScoreLabel = new Label("Computer: 0");
        computerScoreLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        messageLabel = new Label("");
        messageLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        scorePane.getChildren().addAll(playerScoreLabel, computerScoreLabel, messageLabel);
        gamePane.getChildren().addAll(playerChoiceImageView, scorePane, computerChoiceImageView);
        gamePane.setPrefSize(GAME_PANE_WIDTH, GAME_PANE_HEIGHT);
        Button rockButton = new Button("Rock");
        rockButton.setOnAction(e -> playGame(0));
        Button paperButton = new Button("Paper");
        paperButton.setOnAction(e -> playGame(1));
        Button scissorsButton = new Button("Scissors");
        scissorsButton.setOnAction(e -> playGame(2));
        HBox buttonPane = new HBox(20);
        buttonPane.setAlignment(Pos.CENTER);
        buttonPane.getChildren().addAll(rockButton, paperButton, scissorsButton);

        VBox gameScenePane = new VBox(20);
        gameScenePane.setAlignment(Pos.CENTER);
        Pane gameSceneBackground = new Pane(gamePane);
        gameScenePane.getChildren().addAll(gameSceneBackground, buttonPane);
        gameScene = new Scene(gameScenePane, WINDOW_WIDTH, WINDOW_HEIGHT);

        // create end scene
        VBox endPane = new VBox(20);
        endPane.setAlignment(Pos.CENTER);
        Label endTitleLabel = new Label("Game Over");
        endTitleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 36));
        Label endMessageLabel = new Label();
        endMessageLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        Button playAgainButton = new Button("Play Again");
        playAgainButton.setOnAction(e -> {
            playerScore = 0;
            computerScore = 0;
            updateGameScene();
            primaryStage.setScene(gameScene);
        });
        Button quitButton = new Button("Quit");
        quitButton.setOnAction(e -> primaryStage.close());
        HBox endButtonPane = new HBox(20);
        endButtonPane.setAlignment(Pos.CENTER);
        endButtonPane.getChildren().addAll(playAgainButton, quitButton);
        endPane.getChildren().addAll(endTitleLabel, endMessageLabel, endButtonPane);
        endScene = new Scene(endPane, WINDOW_WIDTH, WINDOW_HEIGHT);

        primaryStage.setScene(startScene);
        primaryStage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }
    private void playGame(int playerChoice) {
        int computerChoice = random.nextInt(choices.length);
        Image playerChoiceImage = new Image(getClass().getResourceAsStream(choices[playerChoice] + ".png"));
        playerChoiceImageView.setImage(playerChoiceImage);
        Image computerChoiceImage = new Image(getClass().getResourceAsStream(choices[computerChoice] + ".png"));
        computerChoiceImageView.setImage(computerChoiceImage);
        if (playerChoice == computerChoice) {
            messageLabel.setText("Tie!");
        } else if ((playerChoice == 0 && computerChoice == 2) ||
                (playerChoice == 1 && computerChoice == 0) ||
                (playerChoice == 2 && computerChoice == 1)) {
            playerScore++;
            playerScoreLabel.setText("Player: " + playerScore);
            messageLabel.setText("Player wins!");
        } else {
            computerScore++;
            computerScoreLabel.setText("Computer: " + computerScore);
            messageLabel.setText("Computer wins!");
        }
        if (playerScore == maxScore || computerScore == maxScore) {
            String winner = playerScore == maxScore ? "Player" : "Computer";
            Label endMessageLabel = (Label) endScene.lookup("#endMessageLabel");
            endMessageLabel.setText(winner + " wins the game!");
            primaryStage.setScene(endScene);
        }
    }

    private void updateGameScene() {
        playerChoiceImageView.setImage(null);
        computerChoiceImageView.setImage(null);
        playerScoreLabel.setText("Player: 0");
        computerScoreLabel.setText("Computer: 0");
        messageLabel.setText("");
    }
    public class GameScene {
        private Scene scene;
        private Label resultLabel;
        private ImageView playerImage;
        private ImageView computerImage;
        private Button rockButton;
        private Button paperButton;
        private Button scissorsButton;
        private int playerScore = 0;
        private int computerScore = 0;
        private int winningScore = 3;

        public GameScene() {
            // create images
            Image rockImage = new Image(getClass().getResourceAsStream("rock.png"));
            Image paperImage = new Image(getClass().getResourceAsStream("paper.png"));
            Image scissorsImage = new Image(getClass().getResourceAsStream("scissors.png"));
            playerImage = new ImageView();
            computerImage = new ImageView();
            playerImage.setFitWidth(200);
            playerImage.setFitHeight(200);
            computerImage.setFitWidth(200);
            computerImage.setFitHeight(200);
            playerImage.setImage(rockImage);
            computerImage.setImage(rockImage);

            // create buttons
            rockButton = new Button("Rock");
            paperButton = new Button("Paper");
            scissorsButton = new Button("Scissors");
            rockButton.setOnAction(e -> play(PlayerSelection.ROCK));
            paperButton.setOnAction(e -> play(PlayerSelection.PAPER));
            scissorsButton.setOnAction(e -> play(PlayerSelection.SCISSORS));

            // create result label
            resultLabel = new Label("Choose your move to start playing.");

            // create layout
            VBox layout = new VBox(20);
            layout.setAlignment(Pos.CENTER);
            layout.getChildren().addAll(playerImage, computerImage, new HBox(20, rockButton, paperButton, scissorsButton), resultLabel);
            scene = new Scene(layout, 600, 600);

            // start the game
            play(PlayerSelection.ROCK);
        }

        public Scene getScene() {
            return scene;
        }

        private void play(PlayerSelection playerSelection) {
            // generate computer selection
            ComputerSelection computerSelection = ComputerSelection.getRandomSelection();

            // update images
            playerImage.setImage(playerSelection.getImage());
            computerImage.setImage(computerSelection.getImage());

            // determine winner
            Result result = playerSelection.getResult(computerSelection);

            // update scores and result label
            if (result == Result.WIN) {
                playerScore++;
            } else if (result == Result.LOSE) {
                computerScore++;
            }
            resultLabel.setText("Player: " + playerScore + "   Computer: " + computerScore + "\n" + result.toString());

            // check for winner
            if (playerScore >= winningScore) {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Game Over");
                alert.setHeaderText(null);
                alert.setContentText("Congratulations! You win!");
                alert.showAndWait();
                reset();
            } else if (computerScore >= winningScore) {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Game Over");
                alert.setHeaderText(null);
                alert.setContentText("Sorry, you lost. Better luck next time!");
                alert.showAndWait();
                reset();
            }
        }

        private void reset() {
            playerScore = 0;
            computerScore = 0;
            playerImage.setImage(new Image(getClass().getResourceAsStream("rock.png")));
            computerImage.setImage(new Image(getClass().getResourceAsStream("rock.png")));
            resultLabel.setText("Choose your move to start playing.");
        }

    
}
}


